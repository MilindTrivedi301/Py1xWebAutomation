{"name": "test_vwologin_positive", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=111.0.5563.64)\nStacktrace:\n#0 0x5595c2454243 <unknown>\n#1 0x5595c22187a6 <unknown>\n#2 0x5595c21f399c <unknown>\n#3 0x5595c227afef <unknown>\n#4 0x5595c228e386 <unknown>\n#5 0x5595c2275e53 <unknown>\n#6 0x5595c22489ea <unknown>\n#7 0x5595c2249b2e <unknown>\n#8 0x5595c24a8d5e <unknown>\n#9 0x5595c24aca80 <unknown>\n#10 0x5595c248e8b0 <unknown>\n#11 0x5595c24adb63 <unknown>\n#12 0x5595c247ff75 <unknown>\n#13 0x5595c24d0998 <unknown>\n#14 0x5595c24d0b27 <unknown>\n#15 0x5595c24ebc23 <unknown>\n#16 0x7f755a777609 start_thread", "trace": "@pytest.mark.positive\n    # pytest -k \"positive\" *\n    def test_vwologin_positive():\n        load_dotenv()\n        driver = webdriver.Chrome()\n        driver.get(\"https://app.vwo.com\")\n        # driver.implicitly_wait(20)\n        #\n        # # e1, e2 ???\n        # # # Tell Webdriver to wait for 20 Seconds to Load - All the elements\n        # # # What if e1,e2,e3 <  20 waste of time\n    \n        # CSS Selector - Try to use all the CSS in the script\n    \n>       email_input = driver.find_element(By.CSS_SELECTOR, \"[name='username']\")\n\ncode/01basics/10_JAN_2024/test_Lab17.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../../Py1xAPIAutomation/venv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:742: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n../../Py1xAPIAutomation/venv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f65af425fa0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...wn>\\\\n#14 0x5595c24d0b27 \\\\u003Cunknown>\\\\n#15 0x5595c24ebc23 \\\\u003Cunknown>\\\\n#16 0x7f755a777609 start_thread\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=111.0.5563.64)\nE       Stacktrace:\nE       #0 0x5595c2454243 <unknown>\nE       #1 0x5595c22187a6 <unknown>\nE       #2 0x5595c21f399c <unknown>\nE       #3 0x5595c227afef <unknown>\nE       #4 0x5595c228e386 <unknown>\nE       #5 0x5595c2275e53 <unknown>\nE       #6 0x5595c22489ea <unknown>\nE       #7 0x5595c2249b2e <unknown>\nE       #8 0x5595c24a8d5e <unknown>\nE       #9 0x5595c24aca80 <unknown>\nE       #10 0x5595c248e8b0 <unknown>\nE       #11 0x5595c24adb63 <unknown>\nE       #12 0x5595c247ff75 <unknown>\nE       #13 0x5595c24d0998 <unknown>\nE       #14 0x5595c24d0b27 <unknown>\nE       #15 0x5595c24ebc23 <unknown>\nE       #16 0x7f755a777609 start_thread\n\n../../Py1xAPIAutomation/venv/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchWindowException"}, "start": 1708324183655, "stop": 1708324186166, "uuid": "69cdf73e-a29c-4baa-a097-edebfe227f99", "historyId": "055c8353a0492ef6e2eb586a8078cc04", "testCaseId": "055c8353a0492ef6e2eb586a8078cc04", "fullName": "code.01basics.10_JAN_2024.test_Lab17#test_vwologin_positive", "labels": [{"name": "tag", "value": "positive"}, {"name": "parentSuite", "value": "code.01basics.10_JAN_2024"}, {"name": "suite", "value": "test_Lab17"}, {"name": "host", "value": "milind-ThinkCentre-M70t"}, {"name": "thread", "value": "960856-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "code.01basics.10_JAN_2024.test_Lab17"}]}